AnnotationConfigApplicationContext
    this(); 创建一个新的注解式配置应用程序上下文
        -> 父类构造
        this.beanFactory = new DefaultListableBeanFactory(); 初始化 beanFactory
        -> this构造
        this.reader = new AnnotatedBeanDefinitionReader(this); 创建一个注解式 Bean 定义读取器
        this.scanner = new ClassPathBeanDefinitionScanner(this); 
            创建一个 BeanDefinition 扫描器，这个扫描器并不会参与 Bean 的包路径扫描。
            而是让调用者手动调用的一个扫描器 -> context.scan(String package);org.springframework.context.annotation.AnnotationConfigApplicationContext.scan
            扫描 Bean 的扫描器是在 -> org.springframework.context.annotation.ConfigurationClassParser(MetadataReaderFactory metadataReaderFactory,
			     ProblemReporter problemReporter, Environment environment, ResourceLoader resourceLoader,
			     BeanNameGenerator componentScanBeanNameGenerator, BeanDefinitionRegistry registry) 初始化的

    register(componentClasses); 注册配置类
        this.reader.register(componentClasses); 使用构造方法初始化的 BeanDefinitionReader 来读取配置类
            registerBean(componentClass);
                doRegisterBean(beanClass, null, null, null, null);
                    BeanDefinitionReaderUtils.registerBeanDefinition(definitionHolder, this.registry); 注册 Bean 定义
                        registry.registerBeanDefinition(beanName, definitionHolder.getBeanDefinition());
                            beanDefinition = this.beanDefinitionMap.get(beanName)
                                如果有就覆盖：(existingDefinition != null){this.beanDefinitionMap.put(beanName, beanDefinition)}
                                没有就添加到 beanDefinitionMap 中：this.beanDefinitionMap.put(beanName, beanDefinition);this.beanDefinitionNames.add(beanName);

    refresh(); IOC容器刷新接口
        prepareRefresh(); 准备此上下文以进行刷新、设置其启动日期和活动标志以及执行属性源的任何初始化
        ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();
            refreshBeanFactory(); 刷新 BeanFactory ，ClassPathXmlApplicationContext 的是有一系列的判断加初始化，而 AnnotationConfigApplicationContext 是只有赋值初始化序列Id
            getBeanFactory(); 这里获取的 BeanFactory 是在 this() 中的 GenericApplicationContext 父类初始化的 DefaultListableBeanFactory 
        prepareBeanFactory(beanFactory); 设置 BeanFactory 的类加载器，添加几个 BeanPostProcessor，手动注册几个特殊的 bean 
            beanFactory.setBeanClassLoader(getClassLoader()); 设置当前 ApplicationContext 的类加载器为 beanFactory 的 Bean 的类加载器
            beanFactory.setBeanExpressionResolver(new StandardBeanExpressionResolver(beanFactory.getBeanClassLoader())); 设置 Bean 表达式解析器
            beanFactory.addPropertyEditorRegistrar(new ResourceEditorRegistrar(this, getEnvironment())); 设置资源编辑器注册器
            beanFactory.addBeanPostProcessor(new ApplicationContextAwareProcessor(this)); 添加一个 BeanPostProcessor 此 BeanPostProcessor 可以帮助我们获取 ApplicationContext 
            beanFactory.ignoreDependencyInterface(Class<?> ifc);配置了7个忽略依赖接口，如果某个 Bean 实现这些忽略的接口，在自动装配的时候忽略这些 Bean 
            beanFactory.registerResolvableDependency(Class<?> dependencyType, @Nullable Object autowiredValue); 如果 Bean 在自动装配的时候有使用这些类(dependencyType)的自动装配类型则会注入这些类  autowiredValue 
            beanFactory.addBeanPostProcessor(new ApplicationListenerDetector(this)); 注册时间监听器：在 Bean 实例化后如果该 Bean 是 ApplicationListener 的子类，就将其添加到 listener 列表中。
            beanFactory.registerSingleton(String beanName, Object singletonObject); 注册了一些运行环境参数。
        postProcessBeanFactory(beanFactory); 允许在上下文子类中对 bean 工厂进行后置处理。 这里 AnnotationConfigApplicationContext 并没有实现，默认是空方法体。
        invokeBeanFactoryPostProcessors(beanFactory); 调用 BeanFactoryPostProcessor 各个实现类的 postProcessBeanFactory(factory) 回调方法,并且在里面会判断 Bean 是否为配置类然后做配置类的解析
            PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors()); 调用 Bean 工厂后期处理器
                registryProcessor.postProcessBeanDefinitionRegistry(registry); 注册 Bean 的后置处理器
                    processConfigBeanDefinitions(registry); 解析配置类(@Configuration)的 BeanDefinition
                    ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory) 标记和判断是否为配置类
                    parser = new ConfigurationClassParser(this.metadataReaderFactory, this.problemReporter, this.environment,this.resourceLoader, this.componentScanBeanNameGenerator, registry) 初始化 ConfigurationClassParser 并且把 componentScanParser扫描器也初始化
                    parser.parse(candidates); 解析配置类
                        parse(bd.getBeanClassName(), holder.getBeanName()); 
                            processConfigurationClass(new ConfigurationClass(reader, beanName), DEFAULT_EXCLUSION_FILTER);
                                doProcessConfigurationClass(configClass, sourceClass, filter); 真正地处理配置里解析
                                    processMemberClasses(configClass, sourceClass, filter);  处理 @Component 注解
                                    this.propertySourceRegistry.processPropertySource(propertySource); 处理 @PropertySource 注解
                                    this.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName()); 处理 @ComponentScans,@ComponentScan 注解
                                        scanner = new ClassPathBeanDefinitionScanner(this.registry,componentScan.getBoolean("useDefaultFilters"), this.environment, this.resourceLoader); 类路径 Bean 定义扫描器
                                        ... 处理各种定义 @ComponentScan 参数，如：excludeFilters,includeFilters,basePackages
                                        scanner.doScan(StringUtils.toStringArray(basePackages)); 扫描已经处理好的包路径数组集合
                                            candidates = findCandidateComponents(basePackage); 找到所有候选的 带有 @Component 注解的 BeanDefinition
                                            candidates.for:definitionHolder  registerBeanDefinition(definitionHolder, this.registry); 循环把解析出来的 BeanDefinitionHolder 注册到 IOC 容器
                                    processImports(configClass, sourceClass, getImports(sourceClass), filter, true); 处理 @Import 注解
                                    resolvedResource = this.environment.resolveRequiredPlaceholders(resource); configClass.addImportedResource(resolvedResource, readerClass);  处理 @ImportResource 注解
                                    retrieveBeanMethodMetadata(sourceClass); 处理 @Bean 注解
                                    processInterfaces(configClass, sourceClass); 处理接口的默认方法
                                        processInterfaces(configClass, ifc); 递归处理配置类实现的接口上注册默认方法
                registryProcessors.add(registryProcessor); 把后置处理器添加到待注册集合
                ~~~ 以下四步是按照 PriorityOrdered Ordered 其他剩余的 BeanDefinitionRegistryPostProcessor ~~~
                sortPostProcessors(currentRegistryProcessors, beanFactory); 排序后置处理器
                registryProcessors.addAll(currentRegistryProcessors); 把当前的处理器添加到总处理器中
                invokeBeanDefinitionRegistryPostProcessors(currentRegistryProcessors, registry, beanFactory.getApplicationStartup()); 调用 Bean 定义注册表后处理器
                    postProcessor.postProcessBeanDefinitionRegistry(registry); BeanDefinition 的后置处理器注册
                        processConfigBeanDefinitions(registry); 解析配置类(@Configuration)的 BeanDefinition
                currentRegistryProcessors.clear(); 调用后清空当前处理器
                ~~~ 以下是按照 PriorityOrdered Ordered 其他剩余的 BeanDefinitionRegistryPostProcessor ~~~
                invokeBeanFactoryPostProcessors(registryProcessors, beanFactory); 调用所有处理器的 postProcessBeanFactory 回调
        registerBeanPostProcessors(beanFactory); 注册 BeanPostProcessor 的实现类。
            PostProcessorRegistrationDelegate.registerBeanPostProcessors(beanFactory, this); 注册 Bean 后置处理器: BeanPostProcessorChecker,ApplicationListenerDetector
        initMessageSource(); 初始化当前上下文的国际化
            new DelegatingMessageSource(); 初始化的流程是使用一个新的 DelegatingMessageSource
            beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource); 初始化 MessageSource 后就把该消息源注册到单例 Bean 
        initApplicationEventMulticaster(); 为此上下文初始化事件多播器。 
            new SimpleApplicationEventMulticaster(beanFactory); 初始化的流程是使用一个新的 SimpleApplicationEventMulticaster
            beanFactory.registerSingleton(APPLICATION_EVENT_MULTICASTER_BEAN_NAME, this.applicationEventMulticaster);  初始化 ApplicationEventMulticaster 后就把该时间多播器注册到单例 Bean  
        onRefresh(); 在特定的上下文子类中初始化其他特殊 Bean 。在这里是空的方法体。具体实现看 web 。 
        registerListeners(); 注册事件监听器，监听器需要实现 ApplicationListener 接口
        finishBeanFactoryInitialization(beanFactory); 实例化所有剩余的（非懒加载初始化）单例 Bean。
            beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)); 优先初始化名称为 conversionService 的 ConversionService.class Bean
            beanFactory.addEmbeddedValueResolver(strVal -> getEnvironment().resolvePlaceholders(strVal)); 添加属性值解析器到 beanFactory
            beanFactory.freezeConfiguration(); 冻结所有 BeanDefinition 表明已注册的 beanDefinition 将不会被修改或进一步后处理。
            beanFactory.preInstantiateSingletons(); 实例化所有剩余的（非懒加载初始化）单例。
                getBean(beanName); 调用 getBean 进行初始化,如果是 FactoryBean 则需要加上前置符号 &
                    doGetBean(name, null, null, false);
                        getSingleton(beanName); 从缓存中读取单例 Bean
                            getSingleton(beanName, true); 从一二三级缓存中读取Bean ： singletonObjects,earlySingletonObjects,singletonFactories
                        getObjectForBeanInstance(sharedInstance, name, beanName, null); 读取得到就直接获取 Bean 的实例对象
                        registerDependentBean(dep, beanName); 注册其依赖的 Bean
                        getBean(dep); 初始化依赖的 Bean
                        createBean(beanName, mbd, args); 创建 Bean
                            resolveBeforeInstantiation(beanName, mbdToUse); 用 Bean的 后置处理器 让 InstantiationAwareBeanPostProcessor 在这一步有机会返回代理
                            doCreateBean(beanName, mbdToUse, args); 创建 Bean
                                createBeanInstance(beanName, mbd, args); 创建 Bean 的实例化
                                    instantiateUsingFactoryMethod(beanName, mbd, args); 使用工厂方法实例化
                                    autowireConstructor(beanName, mbd, null, null); 采用构造方法依赖注入
                                    instantiateBean(beanName, mbd); 使用无参构造方法注入
                                applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName); 调用 MergedBeanDefinitionPostProcessor 后置处理器回调
                                earlySingletonExposure = (mbd.isSingleton() && this.allowCircularReferences && isSingletonCurrentlyInCreation(beanName)); 是单例&&允许循环引用&&正在创建的
                                addSingletonFactory(beanName, () -> getEarlyBeanReference(beanName, mbd, bean)); 如果有循环依赖就加到三级缓存里
                                populateBean(beanName, mbd, instanceWrapper); 装配属性
                                initializeBean(beanName, exposedObject, mbd); Bean 初始化后的各种回调 -> init-method,InitializingBean,BeanPostProcessor
                                    invokeAwareMethods(beanName, bean); 调用 Aware 接口的回调: BeanFactoryAware,BeanClassLoaderAware,BeanNameAware
                                    invokeInitMethods(beanName, wrappedBean, mbd); 调用初始化方法,处理Bean中定义的: init-method 或者实现了: InitializingBean.afterPropertiesSet
                                    applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName); BeanPostProcessor 的 postProcessAfterInitialization 回调
                        getObjectForBeanInstance(sharedInstance, name, beanName, mbd); 获取 Bean 实例对象
        finishRefresh();
        